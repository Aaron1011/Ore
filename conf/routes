# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /*path/                                                     @controllers.Application.removeTrail(path)

GET     /admin/reset                                                @controllers.Application.reset
GET     /admin/seed                                                 @controllers.Application.seed(users: Option[Int], versions: Option[Int], channels: Option[Int])
GET     /admin/flags                                                @controllers.Application.showFlags()
GET     /admin/flags/:id/resolve/:resolved                          @controllers.Application.setFlagResolved(id: Int, resolved: Boolean)

# ---------- API (v1) ----------
GET     /api/projects                                               @controllers.ApiController.listProjects(version = "v1", categories: Option[String], sort: Option[Int], q: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/projects/:pluginId                                     @controllers.ApiController.showProject(version = "v1", pluginId)

GET     /api/projects/:pluginId/versions                            @controllers.ApiController.listVersions(version = "v1", pluginId, channels: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/projects/:pluginId/versions/:channel/:name             @controllers.ApiController.showVersion(version = "v1", pluginId, channel, name)

GET     /api/users                                                  @controllers.ApiController.listUsers(version = "v1", limit: Option[Int], offset: Option[Int])
GET     /api/users/:user                                            @controllers.ApiController.showUser(version = "v1", user)

GET     /api/:version/projects                                      @controllers.ApiController.listProjects(version, categories: Option[String], sort: Option[Int], q: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/:version/projects/:pluginId                            @controllers.ApiController.showProject(version, pluginId)

GET     /api/:version/projects/:pluginId/versions                   @controllers.ApiController.listVersions(version, pluginId, channels: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/:version/projects/:pluginId/versions/:channel/:name    @controllers.ApiController.showVersion(version, pluginId, channel, name)

GET     /api/:version/users                                         @controllers.ApiController.listUsers(version, limit: Option[Int], offset: Option[Int])
GET     /api/:version/users/:user                                   @controllers.ApiController.showUser(version, user)


# ---------- Application ----------

GET     /                                                           @controllers.Application.showHome(categories: Option[String], q: Option[String], sort: Option[Int])
GET     /login                                                      @controllers.Users.logIn(sso: Option[String], sig: Option[String], returnUrl: Option[String])
GET     /logout                                                     @controllers.Users.logOut(returnUrl: Option[String])

# ---------- Projects ----------

GET     /p/:pluginId                                                @controllers.project.Projects.showProjectWithId(pluginId)

GET     /new                                                        @controllers.project.Projects.showCreator

POST    /new/upload                                                 @controllers.project.Projects.upload
GET     /new/:author/:slug                                          @controllers.project.Projects.showCreatorWithMeta(author, slug)
POST    /new/:author/:slug/members                                  @controllers.project.Projects.showMembersConfig(author, slug)

POST    /pages/preview                                              @controllers.project.Pages.showPreview

# ---------- Users ----------
GET     /:user                                                      @controllers.Users.show(user)
POST    /:user/settings/tagline                                     @controllers.Users.saveTagline(user)
# -------- End Users --------

POST    /:author/:slug                                              @controllers.project.Projects.showFirstVersionCreator(author, slug)
GET     /:author/:slug                                              @controllers.project.Projects.show(author, slug)
GET     /:author/:slug/star/:starred                                @controllers.project.Projects.setStarred(author, slug, starred: Boolean)
POST    /:author/:slug/flag                                         @controllers.project.Projects.flag(author, slug)
GET     /:author/:slug/visible/:visible                             @controllers.project.Projects.setVisible(author, slug, visible: Boolean)
GET     /:author/:slug/approve                                      @controllers.project.Projects.approve(author, slug)

GET     /:author/:slug/discuss                                      @controllers.project.Projects.showDiscussion(author, slug)
POST    /:author/:slug/discuss/reply                                @controllers.project.Projects.postDiscussionReply(author, slug)

GET     /:author/:slug/manage                                       @controllers.project.Projects.showSettings(author, slug)
POST    /:author/:slug/manage/save                                  @controllers.project.Projects.save(author, slug)
POST    /:author/:slug/manage/rename                                @controllers.project.Projects.rename(author, slug)
POST    /:author/:slug/manage/delete                                @controllers.project.Projects.delete(author, slug)
POST    /:author/:slug/manage/members/remove                        @controllers.project.Projects.removeMember(author, slug)

GET     /:author/:slug/issues                                       @controllers.project.Projects.showIssues(author, slug)
GET     /:author/:slug/source                                       @controllers.project.Projects.showSource(author, slug)
# ------- End Projects ---------


# ---------- Pages ----------

GET     /:author/:slug/pages/:page/edit                             @controllers.project.Pages.showEditor(author, slug, page)
POST    /:author/:slug/pages/:page/edit                             @controllers.project.Pages.save(author, slug, page)
GET     /:author/:slug/pages/:page/delete                           @controllers.project.Pages.delete(author, slug, page)
GET     /:author/:slug/pages/:page                                  @controllers.project.Pages.show(author, slug, page)


# ---------- Channels ----------

GET     /:author/:slug/channels                                     @controllers.project.Channels.showList(author, slug)
POST    /:author/:slug/channels                                     @controllers.project.Channels.create(author, slug)
POST    /:author/:slug/channels/:channel                            @controllers.project.Channels.save(author, slug, channel)
GET     /:author/:slug/channels/:channel/delete                     @controllers.project.Channels.delete(author, slug, channel)


# ---------- Versions ----------

GET     /:author/:slug/versions                                     @controllers.project.Versions.showList(author, slug, channels: Option[String])

GET     /:author/:slug/versions/:channel/:version/delete            @controllers.project.Versions.delete(author, slug, channel, version)

GET     /:author/:slug/versions/download/:channel/:version          @controllers.project.Versions.download(author, slug, channel, version)
GET     /:author/:slug/versions/download/recommended                @controllers.project.Versions.downloadRecommended(author, slug)

GET     /:author/:slug/versions/new                                 @controllers.project.Versions.showCreator(author, slug)
POST    /:author/:slug/versions/new/upload                          @controllers.project.Versions.upload(author, slug)
GET     /:author/:slug/versions/new/:channel/:version               @controllers.project.Versions.showCreatorWithMeta(author, slug, channel, version)

POST    /:author/:slug/versions/:channel/:version                   @controllers.project.Versions.create(author, slug, channel, version)
GET     /:author/:slug/versions/:channel/:version                   @controllers.project.Versions.show(author, slug, channel, version)
POST    /:author/:slug/versions/:channel/:version/save              @controllers.project.Versions.saveDescription(author, slug, channel, version)
GET     /:author/:slug/versions/:channel/:version/recommended       @controllers.project.Versions.setRecommended(author, slug, channel, version)


# ---------- Other ----------

GET     /assets/*file                                               controllers.Assets.at(path="/public", file)
